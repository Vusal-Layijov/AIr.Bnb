{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there is no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n  // \"XSRF-TOKEN\" cookie\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  }\n  // call the default window's fetch with the url and the options passed in\n  const res = await window.fetch(url, options);\n\n  // if the response status code is 400 or above, then throw an error with the\n  // error being the response\n  if (res.status >= 400) throw res;\n\n  // if the response status code is under 400, then return the response to the\n  // next promise chain\n  return res;\n}\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}","map":{"version":3,"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"sources":["/Users/vusallayicov/Desktop/airbnb/authenticate-me/frontend/src/store/csrf.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n    // set options.method to 'GET' if there is no method\n    options.method = options.method || 'GET';\n    // set options.headers to an empty object if there is no headers\n    options.headers = options.headers || {};\n\n    // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the \n    // \"XSRF-TOKEN\" cookie\n    if (options.method.toUpperCase() !== 'GET') {\n        options.headers['Content-Type'] =\n            options.headers['Content-Type'] || 'application/json';\n        options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n    }\n    // call the default window's fetch with the url and the options passed in\n    const res = await window.fetch(url, options);\n\n    // if the response status code is 400 or above, then throw an error with the\n    // error being the response\n    if (res.status >= 400) throw res;\n\n    // if the response status code is under 400, then return the response to the\n    // next promise chain\n    return res;\n}\nexport function restoreCSRF() {\n    return csrfFetch('/api/csrf/restore');\n}"],"mappings":"AAAA,OAAOA,OAAO,MAAM,WAAW;AAE/B,OAAO,eAAeC,SAAS,CAACC,GAAG,EAAgB;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EAC7C;EACAA,OAAO,CAACC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,KAAK;EACxC;EACAD,OAAO,CAACE,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,CAAC,CAAC;;EAEvC;EACA;EACA;EACA,IAAIF,OAAO,CAACC,MAAM,CAACE,WAAW,EAAE,KAAK,KAAK,EAAE;IACxCH,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,GAC3BF,OAAO,CAACE,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB;IACzDF,OAAO,CAACE,OAAO,CAAC,YAAY,CAAC,GAAGL,OAAO,CAACO,GAAG,CAAC,YAAY,CAAC;EAC7D;EACA;EACA,MAAMC,GAAG,GAAG,MAAMC,MAAM,CAACC,KAAK,CAACR,GAAG,EAAEC,OAAO,CAAC;;EAE5C;EACA;EACA,IAAIK,GAAG,CAACG,MAAM,IAAI,GAAG,EAAE,MAAMH,GAAG;;EAEhC;EACA;EACA,OAAOA,GAAG;AACd;AACA,OAAO,SAASI,WAAW,GAAG;EAC1B,OAAOX,SAAS,CAAC,mBAAmB,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}